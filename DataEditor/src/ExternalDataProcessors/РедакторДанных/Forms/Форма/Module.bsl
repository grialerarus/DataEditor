///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Рарус
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СкрытьРаскрытьВсеГруппы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	
	Представление = Истина;
	УстановкаВидимостиРеквизитов(Истина); 
	УстановитьПредставлениеСтраниц();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеПриИзменении() 
	УстановитьПредставлениеСтраниц();
	Если Представление Тогда
		УстановкаВидимостиРеквизитов(Истина);
	Иначе
		УстановкаВидимостиРеквизитов(Ложь);
	КонецЕсли;	

КонецПроцедуры 

&НаКлиенте
Процедура ОбъектМетаданныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;  
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ПослеВыбораЗначения", ЭтотОбъект);
	ОткрытьФорму("ВнешняяОбработка.РедакторДанных.Форма.ФормаВыбора", , , , , , ОписаниеОповещения);  
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьГруппу(Элемент)
	ИмяГруппыСвернутьРазвернуть = Элемент.Имя;
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияОткрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияЗакрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ЗаголовокГруппы", "");
	ИзменитьСвернутостьГруппы(ИмяГруппыСвернутьРазвернуть);
	ПодключитьОбработчикОжидания("УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы", 0.0001, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСвойства 

&НаКлиенте
Процедура СписокРеквизитовОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.Значение.Очистить();
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыПеретаскивания.Значение.Добавить(ТекущиеДанные.Имя);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Нет текущих данных'");
		Сообщение.Сообщить();
	КонецЕсли;
	Объект.ВыполняемыйТекст.ДобавитьСтроку(ПараметрыПеретаскивания.Значение[0]);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицыНаФормеОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.Значение.Очистить();
	ТекущиеДанные = Элемент.ТекущийЭлемент;
	Родитель = Элемент.Родитель.Заголовок;
	Если ТекущиеДанные <> Неопределено Тогда 
		Если Лев(Элемент.Имя, 15) = "ТаблицаРегистра" Тогда
			Текст = Сред(ТекущиеДанные.Имя, 15);
		Иначе
			Текст = Сред(ТекущиеДанные.Имя, 8);
		КонецЕсли;
		ДлинаСтроки = СтрДлина(Текст);
		Текст = Родитель + "." + Лев(Текст, ДлинаСтроки - 1);
		ПараметрыПеретаскивания.Значение.Добавить(Текст); 
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Нет текущих данных'");
		Сообщение.Сообщить();
	КонецЕсли;
	Объект.ВыполняемыйТекст.ДобавитьСтроку(ПараметрыПеретаскивания.Значение[0]);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнениеРеквизитовОбъекта()
	Если ЗначениеЗаполнено(ОбъектМетаданных) Тогда
		ЗаполнениеРеквизитовОбъектаНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзменения(Команда) 
	
	Если ЭтоДокумент Тогда
		ЗаписатьОбъект = Новый ОписаниеОповещения("Подключаемый_ЗаписатьДокумент", ЭтаФорма);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Записать", "Записать");
		СписокКнопок.Добавить("Провести", "Провести");
		СписокКнопок.Добавить("Отмена", "Отмена");
		ПоказатьВопрос(ЗаписатьОбъект, "Записать или провести документ?", СписокКнопок);	
	Иначе
		ЗаписатьОбъект = Новый ОписаниеОповещения("Подключаемый_ЗаписатьОбъект", ЭтаФорма);
		ПоказатьВопрос(ЗаписатьОбъект, "Записать изменения объекта?", РежимДиалогаВопрос.ДаНет);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДвиженияРегистров(Команда)
	ЗаписатьОбъект = Новый ОписаниеОповещения("Подключаемый_ЗаписатьДвиженияРегистра", ЭтаФорма);
	ПоказатьВопрос(ЗаписатьОбъект, "Записать изменения в регистрах?", РежимДиалогаВопрос.ДаНетОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКод(Команда)
	
	ВыполнитьКодНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

&НаКлиенте
Процедура УстановкаВидимостиРеквизитов(Представление)

	Если Представление Тогда
		Элементы.СписокРеквизитовГруппаИмя.Видимость = Истина;
		Элементы.СписокРеквизитовГруппаСиноним.Видимость = Ложь; 
	Иначе
		Элементы.СписокРеквизитовГруппаИмя.Видимость = Ложь;
		Элементы.СписокРеквизитовГруппаСиноним.Видимость = Истина; 
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеСтраниц() 
	
	Для Каждого ТекущийЭлементФормы Из СписокСозданныхЭлементов Цикл 
		Если Лев(ТекущийЭлементФормы.ЭлементФормы, 8 ) = "Страница" Тогда
			СтраницаФормы = ЭтаФорма.Элементы.Найти(ТекущийЭлементФормы.ЭлементФормы);
			Если Представление Тогда
				СтраницаФормы.Заголовок = ТекущийЭлементФормы.Имя;	
			Иначе
				СтраницаФормы.Заголовок = ТекущийЭлементФормы.Синоним;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаписатьОбъект(РезультатВопроса, ДопПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаписатьИзмененияНаСервере(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаписатьДокумент(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = "Записать" Тогда
		ЗаписатьИзмененияНаСервере(Ложь);
	ИначеЕсли РезультатВопроса = "Провести" Тогда
		ЗаписатьИзмененияНаСервере(Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаписатьДвиженияРегистра(РезультатВопроса, ДопПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаписатьДвиженияРегистровНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияНаСервере(Провести) 
	Если СсылкаНаОбъект = "Константы" Тогда
		ЗначениеКонстанты = Константы[ОбъектМетаданных].Получить();
		ТипКонстанты = 
		ОпределитьТипРеквизитаОбъекта(ТипЗнч(ЗначениеКонстанты), Метаданные.Константы[ОбъектМетаданных].Тип); 
		Если ТипКонстанты = "ХранилищеЗначений" Тогда
			СтруктураХранилища = ЗначениеКонстанты.Получить(); 
			Если СтруктураХранилища <> Неопределено Тогда
				Для Каждого ТекущийРеквизит Из СписокРеквизитов Цикл
				СтруктураХранилища[ТекущийРеквизит.Имя] = ТекущийРеквизит.Значение;
				КонецЦикла; 
			КонецЕсли; 
			ХранилищеВКонстанту = Новый ХранилищеЗначения(СтруктураХранилища, Новый СжатиеДанных(9));
			Константы[ОбъектМетаданных].Установить(ХранилищеВКонстанту);
		Иначе
			Константы[ОбъектМетаданных].Установить(СписокРеквизитов[0].Значение);
		КонецЕсли;
	Иначе
		ОбъектСсылка = СсылкаНаОбъект.ПолучитьОбъект();
		НеИзменяемыеРеквизиты = СформироватьМассивРеквизитов();
		Для Каждого ТекущийРеквизит Из СписокРеквизитов Цикл
			Если НеИзменяемыеРеквизиты.Найти(ТекущийРеквизит.Имя) = Неопределено Тогда
				ОбъектСсылка[ТекущийРеквизит.Имя] = ТекущийРеквизит.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекущаяТабличнаяЧасть Из ОбъектСсылка.Метаданные().ТабличныеЧасти Цикл
			ИмяТаблицыНаФорме = "Таблица_" + ТекущаяТабличнаяЧасть.Имя;
			ТабличнаяЧастьДокумента = ОбъектСсылка[ТекущаяТабличнаяЧасть.Имя];
			ТабличнаяЧастьДокумента.Очистить();
			ТаблицаНаФорме = РеквизитФормыВЗначение(ИмяТаблицыНаФорме);
			ТабличнаяЧастьДокумента.Загрузить(ТаблицаНаФорме); 
		КонецЦикла; 
		
		Попытка
			Если Провести Тогда 
				ОбъектСсылка.Записать(РежимЗаписиДокумента.Проведение);	
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Документ проведен'");
				Сообщение.Сообщить();
			Иначе
				ОбъектСсылка.Записать();	
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Внесенные изменения записаны'");
				Сообщение.Сообщить();
			КонецЕсли;
			
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Объект не записан, возникли ошибки'");
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеВыбораЗначения(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ОпределитьОбъект(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура ОпределитьОбъект(ВыбранноеЗначение)

	Если Строка(ВыбранноеЗначение) = "Структура" Тогда
		ОбъектМетаданных = ВыбранноеЗначение.ОбъектМетаданных;
		СсылкаНаОбъект = ВыбранноеЗначение.Метаданные; 
	Иначе
		ОбъектМетаданных = ВыбранноеЗначение; 
		СсылкаНаОбъект = ВыбранноеЗначение.Ссылка;
		ТипОбъекта = ПолучениеТипаМетаданного(Ложь);
		Если ТипОбъекта = "Документ" Тогда
			ЭтоДокумент = Истина;	
		Иначе
			ЭтоДокумент = Ложь;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучениеТипаМетаданного(ПередатьПолноеИмя)
	
	ПолноеИмя = СсылкаНаОбъект.Метаданные().ПолноеИмя(); 
	СимволРазделения = СтрНайти(ПолноеИмя, ".") - 1;
	ТипОбъекта = Лев(ПолноеИмя, СимволРазделения); 
	Если ПередатьПолноеИмя Тогда
		Возврат ПолноеИмя;
	Иначе
		Возврат ТипОбъекта;
	КонецЕсли;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ОпределитьТипРеквизитаОбъекта(ЗначениеТипа, Реквизит)
	Если ЗначениеТипа = Тип("Булево") Тогда
		Возврат ЗначениеТипа;	
	ИначеЕсли ЗначениеТипа = Тип("Строка") Тогда
		Длина = Реквизит.КвалификаторыСтроки.Длина;
		Возврат Строка(ЗначениеТипа) + " (" + Длина + ")";
	ИначеЕсли ЗначениеТипа = Тип("Число") Тогда
		Разрядность = Реквизит.КвалификаторыЧисла.Разрядность;
		РазрядностьДробнойЧасти = Реквизит.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		Возврат Строка(ЗначениеТипа) + " (" + Разрядность + "," + РазрядностьДробнойЧасти + ")";
	ИначеЕсли ЗначениеТипа = Тип("Дата") Тогда
		ЧастиДатыРеквизита = Реквизит.КвалификаторыДаты.ЧастиДаты;
		Возврат Строка(ЗначениеТипа) + " (" + ЧастиДатыРеквизита + ")";
	ИначеЕсли ЗначениеТипа = Тип("ХранилищеЗначения") Тогда
		Возврат "ХранилищеЗначений";
	ИначеЕсли ЗначениеТипа = Тип("Неопределено") Тогда
		Возврат Неопределено;
	ИначеЕсли ЗначениеТипа = Тип("ОписаниеТипов") Тогда
		Возврат "Составной тип";
	ИначеЕсли ЗначениеТипа = Тип("УникальныйИдентификатор") Тогда
		Возврат "Уникальный идентификатор";
	Иначе
		Возврат Метаданные.НайтиПоТипу(ЗначениеТипа).ПолноеИмя();	
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ОчиститьДанныеФормы()  
	
	СписокРеквизитов.Очистить();
	МассивУдаляемых = Новый Массив;
	Для Каждого РеквизитФормы Из СписокСозданныхЭлементов Цикл
		Если Лев(РеквизитФормы.ЭлементФормы, 7) = "Таблица" Тогда
			РеквизитыТаблицы = ПолучитьРеквизиты(РеквизитФормы.ЭлементФормы);
			Для Каждого Реквизит Из РеквизитыТаблицы Цикл
				МассивУдаляемых.Добавить(Реквизит.Путь + "." + Реквизит.Имя);
			КонецЦикла;
			МассивУдаляемых.Добавить(РеквизитФормы.ЭлементФормы);
		Иначе
			Элементы.Удалить(Элементы[РеквизитФормы.ЭлементФормы]);
		КонецЕсли;
	КонецЦикла; 
	ИзменитьРеквизиты( , МассивУдаляемых);
	СписокСозданныхЭлементов.Очистить(); 
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьМассивРеквизитов()
	
	МассивРеквизитовФормы = Новый Массив;
	МассивРеквизитовФормы.Добавить("GUID");
	МассивРеквизитовФормы.Добавить("Навигационная ссылка");
	МассивРеквизитовФормы.Добавить("Ссылка");
	МассивРеквизитовФормы.Добавить("Предопределенный");
	МассивРеквизитовФормы.Добавить("ЭтоГруппа");
	Возврат МассивРеквизитовФормы;
	
КонецФункции

&НаСервере
Процедура ВывестиРеквизиты(КолекцияРеквизитов)

	Для Каждого ТекущийРеквизит Из КолекцияРеквизитов Цикл
		НоваяСтрока = СписокРеквизитов.Добавить();
		НоваяСтрока.Имя = ТекущийРеквизит.Имя; 
		НоваяСтрока.ТипРеквизита = 
		ОпределитьТипРеквизитаОбъекта(ТипЗнч(СсылкаНаОбъект[ТекущийРеквизит.Имя]), ТекущийРеквизит.Тип); 
		Если ПустаяСтрока(ТекущийРеквизит.Синоним) Тогда
			НоваяСтрока.Синоним = "(" + ТекущийРеквизит.Имя + ")";
		Иначе
			НоваяСтрока.Синоним = ТекущийРеквизит.Синоним;
		КонецЕсли; 
		НоваяСтрока.Значение = СсылкаНаОбъект[ТекущийРеквизит.Имя]; 
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Процедура ВывестиТабличныеЧасти()

	Счетчик = 0; 
	Для Каждого ТекущаяТабличнаяЧасть Из СсылкаНаОбъект.Метаданные().ТабличныеЧасти Цикл
		ТабличнаяЧасть = СсылкаНаОбъект[ТекущаяТабличнаяЧасть.Имя].Выгрузить();
		
		НазваниеСтраницы = "Страница" + Счетчик + "_" + ТекущаяТабличнаяЧасть.Имя;
		НовыйЭлемент = СписокСозданныхЭлементов.Добавить();
		НовыйЭлемент.ЭлементФормы = НазваниеСтраницы; 
		НовыйЭлемент.Имя = ТекущаяТабличнаяЧасть.Имя;
		НовыйЭлемент.Синоним = ТекущаяТабличнаяЧасть.Синоним;
		
		Если ЭтаФорма.Элементы.Найти(НазваниеСтраницы) = Неопределено Тогда
			СинонимСтраницы = ТекущаяТабличнаяЧасть.Синоним;
			Если ПустаяСтрока(СинонимСтраницы) Тогда
				СинонимСтраницы = "(" + ТекущаяТабличнаяЧасть.Имя + ")";
			КонецЕсли; 
			СоздатьСтраницуНаФорме(НазваниеСтраницы, СинонимСтраницы, БиблиотекаКартинок.ВложеннаяТаблица);
		КонецЕсли;
		Счетчик = Счетчик + 1;
		
		НазваниеТаблицы = "Таблица" + "_" + ТекущаяТабличнаяЧасть.Имя; 
		Если ЭтаФорма.Элементы.Найти(НазваниеТаблицы) = Неопределено Тогда
			НовыйЭлемент = СписокСозданныхЭлементов.Добавить();
			НовыйЭлемент.ЭлементФормы = НазваниеТаблицы; 
			НовыйЭлемент.Имя = ТекущаяТабличнаяЧасть.Имя;
			НовыйЭлемент.Синоним = ТекущаяТабличнаяЧасть.Синоним;
			СоздатьТаблицуНаФорме(ТабличнаяЧасть, НазваниеТаблицы, Элементы[НазваниеСтраницы], Счетчик);
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;	 

КонецПроцедуры

&НаСервере
Процедура ВывестиДвиженияДокумента()
	
	Счетчик = 0; 
	
	Если ЭтоДокумент Тогда
		Для Каждого ТекущийРегистр Из СсылкаНаОбъект.Метаданные().Движения Цикл
			ПолноеИмяРегистра = ТекущийРегистр.ПолноеИмя();
			ВидРегистра = Лев(ПолноеИмяРегистра, СтрНайти(ПолноеИмяРегистра, ".") - 1);
			ТаблицаДвиженийРегистра = 
			ПрочитатьДвиженияДокумента(ТекущийРегистр.Имя, ВидРегистра, СсылкаНаОбъект.Ссылка); 
			Если ПоказыватьПустыеДвижения Тогда
				ФормированиеСтраницРегистров(ТаблицаДвиженийРегистра, ТекущийРегистр, ВидРегистра, Счетчик);
				Счетчик = Счетчик + 1;
			Иначе
				Если ТаблицаДвиженийРегистра.Количество() = 0 Тогда
					Продолжить;
				Иначе
					ФормированиеСтраницРегистров(ТаблицаДвиженийРегистра, ТекущийРегистр, ВидРегистра, Счетчик);
					Счетчик = Счетчик + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеРеквизитовОбъектаНаСервере()
	ОчиститьДанныеФормы();
	
	Если ЗначениеЗаполнено(ОбъектМетаданных) Тогда
		Если СтрНайти(ОбъектМетаданных, "e1cib/data/") Тогда
			СсылкаНаОбъект = ПолучитьСсылкуНаОбъект(ОбъектМетаданных); 
			ОбъектМетаданных = СсылкаНаОбъект;
		Иначе 
			ОбъектПоСсылке = НайтиСсылкуПоУИД(ОбъектМетаданных);
			Если ОбъектПоСсылке <> Неопределено Тогда
				СсылкаНаОбъект = ОбъектПоСсылке;
				ОбъектМетаданных = СсылкаНаОбъект;
			КонецЕсли;
		КонецЕсли; 
		Если СсылкаНаОбъект = "Константы" Тогда
			ЗначениеКонстанты = Константы[ОбъектМетаданных].Получить();
			ТипКонстанты = 
			ОпределитьТипРеквизитаОбъекта(ТипЗнч(ЗначениеКонстанты), Метаданные.Константы[ОбъектМетаданных].Тип); 
			Если ТипКонстанты = "ХранилищеЗначений" Тогда
				СтруктураХранилища = ЗначениеКонстанты.Получить(); 
				Если СтруктураХранилища <> Неопределено Тогда
					Для Каждого ТекущееЗначениеХранилища Из СтруктураХранилища Цикл
						НоваяСтрока = СписокРеквизитов.Добавить();
						НоваяСтрока.Имя = ТекущееЗначениеХранилища.Ключ;
						НоваяСтрока.Синоним = ТекущееЗначениеХранилища.Ключ;
						НоваяСтрока.ТипРеквизита = ТипЗнч(ТекущееЗначениеХранилища.Значение); 
						НоваяСтрока.Значение = ТекущееЗначениеХранилища.Значение; 
					КонецЦикла; 
				КонецЕсли;
			Иначе
			НоваяСтрока = СписокРеквизитов.Добавить();
			НоваяСтрока.Имя = ОбъектМетаданных;
			Если ПустаяСтрока(Метаданные.Константы[ОбъектМетаданных].Синоним) Тогда
				НоваяСтрока.Синоним = "(" + ОбъектМетаданных + ")";
			Иначе
				НоваяСтрока.Синоним = Метаданные.Константы[ОбъектМетаданных].Синоним;
			КонецЕсли; 
			НоваяСтрока.ТипРеквизита = ТипКонстанты; 
			НоваяСтрока.Значение = ЗначениеКонстанты;
		КонецЕсли;  
		
		Иначе
			НоваяСтрока = СписокРеквизитов.Добавить();
			НоваяСтрока.Имя = "GUID";
			НоваяСтрока.Синоним = "GUID";
			НоваяСтрока.ТипРеквизита = ТипЗнч(СсылкаНаОбъект.УникальныйИдентификатор());
			НоваяСтрока.Значение = СсылкаНаОбъект.УникальныйИдентификатор();	
			
			НоваяСтрока = СписокРеквизитов.Добавить();
			НоваяСтрока.Имя = "Навигационная ссылка";
			НоваяСтрока.Синоним = "Навигационная ссылка";
			НоваяСтрока.ТипРеквизита = "Строка";
			НоваяСтрока.Значение = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект);
			
			ВывестиРеквизиты(СсылкаНаОбъект.Метаданные().СтандартныеРеквизиты); 
			ВывестиРеквизиты(СсылкаНаОбъект.Метаданные().Реквизиты);
			ВывестиТабличныеЧасти();
			ВывестиДвиженияДокумента();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПредставлениеСтраниц();
КонецПроцедуры

&НаСервере
Процедура ФормированиеСтраницРегистров(ТаблицаДвиженийРегистра, ТекущийРегистр, ВидРегистра, Счетчик)
	ТаблицаДвиженийРегистра.Колонки.Удалить("МоментВремени");
	
	Для Каждого ТекущаяКолонка Из ТаблицаДвиженийРегистра.Колонки Цикл
		ТекущаяКолонка.Имя = "Колонка" + ТекущаяКолонка.Имя;	
	КонецЦикла;
	НазваниеСтраницы = "Страница" + Счетчик + "_" + ТекущийРегистр.Имя;
	НовыйЭлемент = СписокСозданныхЭлементов.Добавить();
	НовыйЭлемент.ЭлементФормы = НазваниеСтраницы; 
	НовыйЭлемент.Имя = ТекущийРегистр.Имя;
	НовыйЭлемент.Синоним = ТекущийРегистр.Синоним;

	Если ЭтаФорма.Элементы.Найти(НазваниеСтраницы) = Неопределено Тогда
		СинонимСтраницы = ТекущийРегистр.Синоним;
		Если ПустаяСтрока(СинонимСтраницы) Тогда
			СинонимСтраницы = "(" + ТекущийРегистр.Синоним.Имя + ")";
		КонецЕсли; 
		СоздатьСтраницуНаФорме(НазваниеСтраницы, СинонимСтраницы, БиблиотекаКартинок[ВидРегистра]);
	КонецЕсли;
	
	Счетчик = Счетчик + 1;
	НазваниеТаблицы = "ТаблицаРегистра" + "_" + ВидРегистра + ТекущийРегистр.Имя;
	Если ЭтаФорма.Элементы.Найти(НазваниеТаблицы) = Неопределено Тогда 
		НовыйЭлемент = СписокСозданныхЭлементов.Добавить();
		НовыйЭлемент.ЭлементФормы = НазваниеТаблицы; 
		НовыйЭлемент.Имя = ТекущийРегистр.Имя;
		НовыйЭлемент.Синоним = ТекущийРегистр.Синоним;
		СоздатьТаблицуНаФорме(ТаблицаДвиженийРегистра, НазваниеТаблицы, Элементы[НазваниеСтраницы], Счетчик);
	КонецЕсли;	
КонецПроцедуры 

&НаСервере
Функция ПрочитатьДвиженияДокумента(ИмяРегистра, ВидРегистра, Регистратор)
	Если ВидРегистра = "РегистрСведений" Тогда
		ПутьКНаборуЗаписей = РегистрыСведений[ИмяРегистра];
	ИначеЕсли ВидРегистра = "РегистрНакопления" Тогда
		ПутьКНаборуЗаписей = РегистрыНакопления[ИмяРегистра];
	ИначеЕсли ВидРегистра = "РегистрБухгалтерии" Тогда
		ПутьКНаборуЗаписей = РегистрыБухгалтерии[ИмяРегистра];
	ИначеЕсли ВидРегистра = "РегистрРасчета" Тогда
		ПутьКНаборуЗаписей = РегистрыРасчета[ИмяРегистра];
	Иначе
		ПутьКНаборуЗаписей = Неопределено;
	КонецЕсли;
	
	ЗаписиРегистра = ПутьКНаборуЗаписей.СоздатьНаборЗаписей();
	ЗаписиРегистра.Отбор.Регистратор.Установить(Регистратор);
	ЗаписиРегистра.Прочитать();
	
	Возврат ЗаписиРегистра.Выгрузить();
КонецФункции

&НаСервере
Процедура СоздатьСтраницуНаФорме(Название, Синоним, Картинка)
	
	СтраницаФормы = Элементы.Добавить(Название, Тип("ГруппаФормы"), Элементы.ГруппаСтраницы);
	СтраницаФормы.Вид = ВидГруппыФормы.Страница;
	СтраницаФормы.Заголовок = Синоним; 
	СтраницаФормы.Картинка = Картинка;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкуНаОбъект(НавигационнаяСсылкаОбъекта)
	Если ЗначениеЗаполнено(НавигационнаяСсылкаОбъекта) Тогда
	ПерваяТочка = СтрНайти(НавигационнаяСсылкаОбъекта, "e1cib/data/");
		Если ПерваяТочка Тогда 		
			ВтораяТочка = СтрНайти(НавигационнаяСсылкаОбъекта, "?ref=");
			ПервыеСлужебныеСимволы = 11;
			ВторыеСлужебныеСимволы = 5;
			ПредставлениеТипа   = Сред(НавигационнаяСсылкаОбъекта, ПерваяТочка + ПервыеСлужебныеСимволы, 
			ВтораяТочка - ПерваяТочка - ПервыеСлужебныеСимволы);
			ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
			СсылкаНаОбъект = Сред(НавигационнаяСсылкаОбъекта, ВтораяТочка + ВторыеСлужебныеСимволы);
			ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", СсылкаНаОбъект);
			Ссылка = ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
		Возврат Ссылка; 
		Иначе
			УидОбъекта = НайтиСсылкуПоУИД(НавигационнаяСсылкаОбъекта);
			Возврат УидОбъекта;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции

&НаСервере
Процедура СоздатьТаблицуНаФорме(ТаблицаИсточник, ИмяТаблицыНаФорме, НазваниеСтраницы, ПостфиксИмениКолонки = "")

	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Новый РеквизитФормы(ИмяТаблицыНаФорме, Новый ОписаниеТипов("ТаблицаЗначений")));
	Для Каждого ТекущаяКолонка Из ТаблицаИсточник.Колонки Цикл
		Реквизиты.Добавить(Новый РеквизитФормы(ТекущаяКолонка.Имя, ТекущаяКолонка.ТипЗначения, ИмяТаблицыНаФорме));
	КонецЦикла;
	
	ИзменитьРеквизиты(Реквизиты);
	
	ЭлементТаблица = Элементы.Добавить(ИмяТаблицыНаФорме, Тип("ТаблицаФормы"), НазваниеСтраницы);
	ЭлементТаблица.ПутьКДанным = ИмяТаблицыНаФорме;

	Для Каждого ТекущаяКолонка Из ТаблицаИсточник.Колонки Цикл
		РеквизитФормы = Элементы.Добавить("Колонка" + ТекущаяКолонка.Имя + 
		ПостфиксИмениКолонки, Тип("ПолеФормы"), ЭлементТаблица);
		РеквизитФормы.Вид = ВидПоляФормы.ПолеВвода;
		РеквизитФормы.Заголовок = ТекущаяКолонка.Заголовок;
		РеквизитФормы.ПутьКДанным = ИмяТаблицыНаФорме + "." + ТекущаяКолонка.Имя;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаИсточник, ИмяТаблицыНаФорме);
	ЭлементТаблица.УстановитьДействие("ОкончаниеПеретаскивания", "ТаблицыНаФормеОкончаниеПеретаскивания");
КонецПроцедуры

&НаСервере
Функция НайтиСсылкуПоУИД(УИД)
	
	МассивМетаданных = Новый Массив;
	МассивМетаданных.Добавить(Справочники);
	МассивМетаданных.Добавить(Документы);
	МассивМетаданных.Добавить(ПланыВидовХарактеристик);
	МассивМетаданных.Добавить(ПланыСчетов);
	МассивМетаданных.Добавить(ПланыВидовРасчета);
	МассивМетаданных.Добавить(ПланыОбмена);
	МассивМетаданных.Добавить(БизнесПроцессы);
	МассивМетаданных.Добавить(Задачи);
	ОбъектНеНайден = Истина;
	Для Каждого СтрМетаданное Из МассивМетаданных Цикл
		Для Каждого Менеджер Из СтрМетаданное Цикл   
			Попытка 
				Если Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД)).ПолучитьОбъект() <> Неопределено Тогда
					Возврат Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));	
				КонецЕсли;
			Исключение
				ОбъектНеНайден = Ложь;	
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	Если ОбъектНеНайден Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Объект не найден'");
		Сообщение.Сообщить();	
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ОписаниеДвижений(ИмяРегистра, ВидРегистра, Регистратор)
	Если ВидРегистра = "РегистрСведений" Тогда
		ПутьКНаборуЗаписей = РегистрыСведений[ИмяРегистра];
	ИначеЕсли ВидРегистра = "РегистрНакопления" Тогда
		ПутьКНаборуЗаписей = РегистрыНакопления[ИмяРегистра];
	ИначеЕсли ВидРегистра = "РегистрБухгалтерии" Тогда
		ПутьКНаборуЗаписей = РегистрыБухгалтерии[ИмяРегистра];
	ИначеЕсли ВидРегистра = "РегистрРасчета" Тогда
		ПутьКНаборуЗаписей = РегистрыРасчета[ИмяРегистра];
	Иначе
		ПутьКНаборуЗаписей = Неопределено;
	КонецЕсли;
	
	ЗаписиРегистра = ПутьКНаборуЗаписей.СоздатьНаборЗаписей();
	ЗаписиРегистра.Отбор.Регистратор.Установить(Регистратор);
	
	Возврат ЗаписиРегистра;
КонецФункции

&НаСервере
Процедура ЗаписатьДвиженияРегистровНаСервере()

	Для Каждого ТекущийРегистр Из СсылкаНаОбъект.Метаданные().Движения Цикл 
		ПолноеИмяРегистра = ТекущийРегистр.ПолноеИмя();
		ВидРегистра = Лев(ПолноеИмяРегистра, СтрНайти(ПолноеИмяРегистра, ".") - 1);
		
		ИмяТаблицыНаФорме = "ТаблицаРегистра" + "_" + ВидРегистра + ТекущийРегистр.Имя;
		ВсеЗаписано = Истина;
		Попытка
			ТаблицаДвиженийРегистра = ОписаниеДвижений(ТекущийРегистр.Имя, ВидРегистра, СсылкаНаОбъект.Ссылка);
			ТабРезультат = РеквизитФормыВЗначение(ИмяТаблицыНаФорме);  
			Для Каждого ТекущаяКолонка Из ТабРезультат.Колонки Цикл
				ТекущаяКолонка.Имя = Сред(ТекущаяКолонка.Имя, 8);	
			КонецЦикла;  
			ТаблицаДвиженийРегистра.Загрузить(ТабРезультат);
			ТаблицаДвиженийРегистра.Записать(); 
			ВсеЗаписано = Истина;
		Исключение
			ВсеЗаписано = Ложь;
		КонецПопытки;
	КонецЦикла; 
	Если ВсеЗаписано Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Объект записан'");
		Сообщение.Сообщить();
	Иначе 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Объект не записан, возникли ошибки'");
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектМетаданныхОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 
	Если ЗначениеЗаполнено(ОбъектМетаданных) Тогда
		ПараметрыФормы = Новый Структура("Ключ", СсылкаНаОбъект);
		Если СсылкаНаОбъект = "Константы" Тогда
			ОткрытьФорму("Константа." + ОбъектМетаданных + ".ФормаКонстант");	
		Иначе
			ТипМетаданного = ПолучениеТипаМетаданного(Истина); 
			ОткрытьФорму(ТипМетаданного + ".ФормаОбъекта", ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКодНаСервере() 
	
	Попытка
		Выполнить(Объект.ВыполняемыйТекст);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Ошибка метода выполнить'");
		Сообщение.Сообщить();
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть = Неопределено)
	Если Свернуть = Неопределено Тогда
		Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость = 
		Не Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость;
		Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость = Не Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость;
		Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость = Не Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость;
	Иначе
		Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость = Не Свернуть;
		Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость = Свернуть;
		Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость = Не Свернуть;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СкрытьРаскрытьВсеГруппы(Свернуть = Неопределено)
	
	ИменаСворачиваемыхГрупп = ИменаСворачиваемыхГрупп();
	Для Каждого ИмяГруппы Из ИменаСворачиваемыхГрупп Цикл
		ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИменаСворачиваемыхГрупп()
	
	ИменаСворачиваемыхГрупп = Новый Массив;
	ИменаСворачиваемыхГрупп.Добавить("НашаГруппа4");
	Возврат ИменаСворачиваемыхГрупп;
	
КонецФункции

&НаКлиенте
Процедура УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы()
	Если Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть].Видимость Тогда
		ТекущийЭлемент = Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть];
	Иначе
		ТекущийЭлемент = Элементы["ДекорацияЗакрыть" + ИмяГруппыСвернутьРазвернуть];
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

